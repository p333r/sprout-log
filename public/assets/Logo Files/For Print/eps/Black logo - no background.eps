%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 1264 2376
%%HiResBoundingBox: 0 0 1263.12 2375.04
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 1263.12 2375.04 re
W
q
[0.24 0 0 -0.24 0 2375.04] cm
q
0 0 5259.375 9893.75 re
W*
q
[26.036505 0 0 26.044407 260.36557 260.44406] cm
10 0 m
172 0 l
172.32751 0 172.65424 0.016051 172.98018 0.048153 c
173.30612 0.080255 173.62968 0.128253 173.9509 0.192147 c
174.27213 0.256042 174.58943 0.335525 174.90283 0.430597 c
175.21625 0.525668 175.52425 0.635871 175.82681 0.761205 c
176.12941 0.886538 176.42511 1.026399 176.71394 1.180787 c
177.00278 1.335175 177.28334 1.503348 177.55566 1.685304 c
177.82799 1.86726 178.09074 2.062124 178.34392 2.269896 c
178.59709 2.477667 178.83946 2.697346 179.07104 2.928932 c
179.30264 3.160518 179.52232 3.402896 179.7301 3.656067 c
179.93785 3.909237 180.13271 4.171981 180.31467 4.444297 c
180.49663 4.716614 180.66479 4.997192 180.8192 5.286032 c
180.97359 5.574872 181.11345 5.870583 181.23877 6.173165 c
181.36412 6.475747 181.47432 6.783743 181.5694 7.097153 c
181.66447 7.410563 181.74394 7.727877 181.80783 8.049096 c
181.87173 8.370316 181.91974 8.693893 181.95184 9.019829 c
181.98395 9.345764 182 9.672488 182 10 c
182 350 l
182 350.32751 181.98395 350.65424 181.95184 350.98019 c
181.91974 351.30609 181.87173 351.62967 181.80783 351.95087 c
181.74394 352.27209 181.66447 352.58942 181.5694 352.9028 c
181.47432 353.21625 181.36412 353.52426 181.23877 353.82681 c
181.11345 354.12939 180.97359 354.42511 180.81921 354.71396 c
180.66481 355.00281 180.49663 355.28339 180.31467 355.55569 c
180.13271 355.828 179.93785 356.09076 179.73009 356.34393 c
179.52232 356.59711 179.30264 356.83948 179.07104 357.07108 c
178.83946 357.30267 178.59709 357.52237 178.34392 357.73013 c
178.09074 357.9379 177.82799 358.13275 177.55566 358.31467 c
177.28334 358.49664 177.00276 358.66479 176.71393 358.81918 c
176.42511 358.97357 176.12941 359.11343 175.82681 359.23877 c
175.52425 359.36411 175.21625 359.47433 174.90283 359.5694 c
174.58943 359.66449 174.27213 359.74396 173.9509 359.80783 c
173.62968 359.87177 173.30612 359.91977 172.98018 359.95187 c
172.65424 359.98395 172.32751 360 172 360 c
10 360 l
9.672488 360 9.345764 359.98395 9.019829 359.95187 c
8.693893 359.91977 8.370316 359.87177 8.049096 359.80783 c
7.727877 359.74396 7.410563 359.66449 7.097153 359.5694 c
6.783743 359.47433 6.475747 359.36411 6.173165 359.23877 c
5.870583 359.11343 5.574873 358.97357 5.286033 358.81918 c
4.997192 358.66479 4.716614 358.49664 4.444297 358.31467 c
4.171981 358.13275 3.909237 357.9379 3.656067 357.7301 c
3.402896 357.52237 3.160518 357.30267 2.928932 357.07108 c
2.697346 356.83948 2.477667 356.59711 2.269896 356.34393 c
2.062124 356.09076 1.86726 355.828 1.685304 355.55569 c
1.503348 355.28339 1.335176 355.00281 1.180787 354.71396 c
1.026399 354.42511 0.886538 354.12939 0.761205 353.82681 c
0.635871 353.52426 0.525668 353.21628 0.430597 352.90283 c
0.335525 352.58942 0.256042 352.27209 0.192147 351.9509 c
0.128253 351.6297 0.080255 351.30612 0.048153 350.98019 c
0.016051 350.65424 0 350.32751 0 350 c
0 10 l
0 9.672488 0.016051 9.345764 0.048153 9.019829 c
0.080255 8.693893 0.128253 8.370316 0.192147 8.049096 c
0.256042 7.727877 0.335525 7.410563 0.430597 7.097153 c
0.525668 6.783743 0.635871 6.475747 0.761205 6.173165 c
0.886538 5.870583 1.026399 5.574873 1.180787 5.286033 c
1.335175 4.997192 1.503348 4.716614 1.685304 4.444297 c
1.86726 4.171981 2.062124 3.909237 2.269896 3.656067 c
2.477667 3.402896 2.697346 3.160518 2.928932 2.928932 c
3.160518 2.697346 3.402896 2.477667 3.656067 2.269896 c
3.909237 2.062124 4.171981 1.86726 4.444297 1.685304 c
4.716614 1.503348 4.997192 1.335176 5.286032 1.180787 c
5.574872 1.026399 5.870583 0.886538 6.173165 0.761205 c
6.475747 0.635871 6.783743 0.525668 7.097153 0.430597 c
7.410563 0.335525 7.727877 0.256042 8.049096 0.192147 c
8.370316 0.128253 8.693893 0.080255 9.019829 0.048153 c
9.345764 0.016051 9.672488 0 10 0 c
h
f
Q
q
[59.644932 0 0 59.66304 -625.84784 466.15475] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
66.199997 71.5 m
65.599998 71.599998 65.5 70.199997 65.699997 69.699997 c
67.299995 64.699997 64.399994 44.699997 57.099998 32.999996 c
56.899998 32.599995 58.299999 32.299995 58.5 32.599995 c
66.099998 42.900002 71.400002 70.800003 66.199997 71.5 c
h
f
55.900002 11.5 m
61 18.299999 55.900002 30.1 55.900002 30.1 c
55.900002 30.1 42.5 30.9 37.400002 24.200001 c
32.300003 17.500002 33.099998 3.1 33.099998 3.1 c
33.099998 3.1 50.799999 4.7 55.900002 11.5 c
h
f
74.099998 28.299999 m
68.699997 32.399998 59.899998 31.199999 59.899998 31.199999 c
59.899998 31.199999 59.799999 23.5 65.199997 19.399998 c
70.599991 15.299995 79.399994 16.499998 79.399994 16.499998 c
79.399994 16.499998 79.5 24.200001 74.099998 28.299999 c
h
f
43.099998 30.200001 m
50.399998 30.1 55.899998 37.5 55.899998 37.5 c
55.899998 37.5 49.700001 45 42.5 45 c
35.299999 45 29.700001 37.700001 29.700001 37.700001 c
29.700001 37.700001 35.799999 30.200001 43.099998 30.200001 c
h
f
67.800003 70.599998 m
67.700005 70.599998 67.600006 70.599998 67.5 70.5 c
67.5 70.599998 67.300003 72.400002 67.199997 72.900002 c
67.099998 73.400002 67 74 66.799995 74.599998 c
66.599998 75.199997 66.399994 75.900002 66.099998 76.5 c
65.799995 77.199997 65.5 77.900002 65.099998 78.599998 c
64.699997 79.299995 64.199997 80 63.599998 80.699997 c
63 81.399994 62.299999 82 61.5 82.599998 c
59.900002 83.799995 58 84.5 56.5 85.199997 c
55.700001 85.599998 55 86 54.599998 86.5 c
54.099998 87 53.899998 87.599998 53.699997 88.199997 c
53.599998 88.799995 53.499996 89.299995 53.499996 89.799995 c
53.499996 90.299995 53.599995 90.699997 53.599995 91.099998 c
53.699993 91.799995 53.799995 92.199997 53.799995 92.199997 c
53.799995 92.199997 53.699997 91.799995 53.499996 91.099998 c
53.399998 90.799995 53.299995 90.299995 53.199997 89.799995 c
53.099998 89.299995 53.099998 88.699997 53.199997 88.099998 c
53.299995 87.5 53.499996 86.799995 53.999996 86.199997 c
54.499996 85.599998 55.199997 85 55.999996 84.599998 c
57.599995 83.699997 59.199997 82.900002 60.499996 81.799995 c
61.099995 81.199997 61.699997 80.599998 62.099995 79.999992 c
64.299995 77.099991 65.299995 75.899994 65.699997 71.999992 c
65.699997 71.299995 65.799995 70.099991 65.799995 70.099991 c
67.599998 70.499992 l
61.299999 68.499992 53 72.599991 48.899998 79.899994 c
44.699997 87.399994 46.399998 95.299995 52.699997 97.699997 c
58.999996 100.099998 67.599998 95.899994 71.899994 88.5 c
75.900002 80.900002 74.199997 72.900002 67.800003 70.599998 c
h
f
Q
q
[24.231302 0 0 24.238659 761.71057 6572.3892] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
9 40.639999 m
5.56 40.639999 0.8 39.16 0.8 39.16 c
3.6 31.200001 l
3.6 31.200001 5.48 35 8.8 35 c
11.480001 35 13.16 33.84 13.16 32.080002 c
13.16 28.880001 1.4 28.681602 1.4 20.560001 c
1.4 14.600001 6.32 11.440002 13.04 11.440002 c
16.360001 11.440002 20.4 13.240002 20.4 13.240002 c
17.639999 20.760002 l
17.639999 20.760002 15.4 16.800003 12.839999 16.800003 c
10.679999 16.800003 9.48 18.160004 9.48 19.480003 c
9.48 22.600002 21.559999 23.120003 21.559999 31.080004 c
21.559999 37.000004 16.039999 40.640003 8.999999 40.640003 c
9 40.639999 l
h
22.879999 40 m
22.879999 40 24.759998 37.599998 24.759998 35.239998 c
24.759998 16.759998 l
24.759998 14.399998 22.879999 11.999998 22.879999 11.999998 c
35.279999 11.999998 l
41.879997 11.999998 47.519997 14.679998 47.519997 20.879997 c
47.519997 25.039997 45.439995 27.719997 42.319996 29.279997 c
40.519997 30.159996 38.399994 30.639997 36.079994 30.839996 c
35.359993 30.919996 33.479996 30.919996 32.759995 30.919996 c
32.759995 35.239998 l
32.759995 37.599998 34.639996 40 34.639996 40 c
22.879995 40 l
22.879999 40 l
h
32.759998 25.6 m
34.199997 25.6 l
37.039997 25.6 39.159996 24.24 39.159996 21.68 c
39.159996 18.68 36.719997 17.720001 33.879997 17.720001 c
32.759998 17.720001 l
32.759998 25.600002 l
32.759998 25.6 l
h
73.199997 40.560001 m
68 40.560001 63.199997 37.16 62.439995 30.880001 c
61.679996 30.920002 59.839996 30.960001 59.119995 30.960001 c
59.119995 35.240002 l
59.119995 37.600002 60.999996 40 60.999996 40 c
49.239998 40 l
49.239998 40 51.119999 37.599998 51.119999 35.239998 c
51.119999 16.759998 l
51.119999 14.399998 49.239998 11.999998 49.239998 11.999998 c
61.639999 11.999998 l
68.239998 11.999998 73.879997 14.719998 73.879997 20.919998 c
73.879997 25.079998 71.799995 27.759998 68.68 29.279999 c
68.800003 32.719997 72.440002 33.639999 75.080002 31.919998 c
75.080002 40.399998 l
74.480003 40.519997 73.840004 40.559998 73.200005 40.559998 c
73.199997 40.560001 l
h
59.119999 25.639999 m
60.52 25.639999 l
63.360001 25.639999 65.520004 24.24 65.520004 21.68 c
65.520004 18.720001 63.080006 17.720001 60.240005 17.720001 c
59.120007 17.720001 l
59.120007 25.640001 l
59.119999 25.639999 l
h
89.919998 40.560001 m
82.599998 40.560001 76.279999 36.960003 76.279999 26 c
76.279999 16.6 81.799995 11.44 89.119995 11.44 c
96.439995 11.44 102.759995 15.039999 102.759995 26 c
102.759995 35.439999 97.239998 40.560001 89.919998 40.560001 c
h
89.68 34.759998 m
92.360001 34.759998 94.360001 31.639999 94.360001 25.999998 c
94.360001 19.399998 92.040001 17.279999 89.360001 17.279999 c
86.68 17.279999 84.68 20.359999 84.68 26 c
84.68 32.599998 87 34.760002 89.68 34.760002 c
89.68 34.759998 l
h
117.120003 40.560001 m
110.560005 40.560001 105.560005 36.84 105.560005 30 c
105.560005 16.92 l
105.560005 14.440001 103.680008 12 103.680008 12 c
115.44001 12 l
115.44001 12 113.560013 14.4 113.560013 16.799999 c
113.560013 30 l
113.560013 33.240002 114.720016 34.720001 117.12001 34.720001 c
119.560013 34.720001 120.720009 33.240002 120.720009 30.000002 c
120.720009 16.920002 l
120.720009 14.440002 118.840012 12.000002 118.840012 12.000002 c
130.600006 12.000002 l
130.600006 12.000002 128.720001 14.400002 128.720001 16.800003 c
128.720001 30.000004 l
128.720001 36.840004 123.720001 40.560005 117.120003 40.560005 c
117.120003 40.560001 l
h
136.639999 40 m
136.639999 40 138.520004 37.599998 138.520004 35.239998 c
138.520004 18.399998 l
136.080002 18.399998 l
133.720001 18.399998 131.320007 20.279997 131.320007 20.279997 c
131.320007 11.999997 l
153.720001 11.999997 l
153.720001 20.279997 l
153.720001 20.279997 151.320007 18.399998 148.960007 18.399998 c
146.520004 18.399998 l
146.520004 35.239998 l
146.520004 37.599998 148.400009 40 148.400009 40 c
136.640015 40 l
136.639999 40 l
h
f
Q
q
[48.785461 0 0 48.80027 755.72717 7255.0469] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0.52 40 m
0.52 40 2.4 37.599998 2.4 35.200001 c
2.4 16.76 l
2.4 14.360001 0.52 12 0.52 12 c
12.280001 12 l
12.280001 12 10.400001 14.360001 10.400001 16.76 c
10.400001 33.599998 l
16.44 33.599998 l
18.800001 33.599998 21.200001 31.719999 21.200001 31.719999 c
21.200001 40 l
0.52 40 l
0.52 40 l
h
36.040001 40.560001 m
28.720001 40.560001 22.400002 36.960003 22.400002 26 c
22.400002 16.6 27.920002 11.44 35.240002 11.44 c
42.560001 11.44 48.880001 15.039999 48.880001 26 c
48.880001 35.439999 43.360001 40.560001 36.040001 40.560001 c
h
35.799999 34.759998 m
38.48 34.759998 40.48 31.639999 40.48 25.999998 c
40.48 19.399998 38.16 17.279999 35.48 17.279999 c
32.799999 17.279999 30.799999 20.359999 30.799999 26 c
30.799999 32.599998 33.119999 34.760002 35.799999 34.760002 c
35.799999 34.759998 l
h
63.799999 40.560001 m
56.599998 40.440002 50.48 36.800003 50.48 26 c
50.48 16.560001 56 11.44 63.32 11.44 c
66.919998 11.44 73 13.24 73 13.24 c
69.940399 21.166401 l
69.940399 21.166401 66.845596 17.186802 63.399998 17.186802 c
60.639999 17.186802 58.719997 19.920002 58.719997 25.600002 c
58.719997 33.360001 61.119999 34.800003 63.879997 34.800003 c
65 34.800003 66.32 34.600002 67.399994 34.360004 c
67.399994 29.200005 l
66.095192 29.200005 64.599991 31.074404 64.599991 31.074404 c
64.599991 24.000004 l
76.473991 24.000004 l
76.473991 24.000004 74.599594 26.386805 74.599594 28.773603 c
74.599594 36.440002 l
74.599594 36.440002 70.43959 40.560001 63.799595 40.560001 c
63.799999 40.560001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
